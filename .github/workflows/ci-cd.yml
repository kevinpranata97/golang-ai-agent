name: AI Agent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  DOCKER_IMAGE: golang-ai-agent

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build application
      run: |
        go build -v -ldflags="-s -w" -o golang-ai-agent .
        chmod +x golang-ai-agent
    
    - name: Test application startup
      run: |
        timeout 10s ./golang-ai-agent || true
        echo "Application startup test completed"
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: golang-ai-agent-${{ github.sha }}
        path: golang-ai-agent

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: golang-ai-agent-${{ github.sha }}
    
    - name: Make binary executable
      run: chmod +x golang-ai-agent
    
    - name: Start application
      run: |
        ./golang-ai-agent &
        sleep 5
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
    
    - name: Test health endpoint
      run: |
        curl -f http://localhost:8080/health || exit 1
        echo "Health check passed"
    
    - name: Test status endpoint
      run: |
        curl -f http://localhost:8080/status || exit 1
        echo "Status check passed"
    
    - name: Test application generation
      run: |
        response=$(curl -s -X POST http://localhost:8080/generate-app \
          -H "Content-Type: application/json" \
          -d '{"description": "Create a simple REST API for user management"}')
        echo "Response: $response"
        if echo "$response" | grep -q "success.*true"; then
          echo "Application generation test passed"
        else
          echo "Application generation test failed"
          exit 1
        fi
    
    - name: Stop application
      run: kill $APP_PID || true

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: golang-ai-agent-${{ github.sha }}
    
    - name: Make binary executable
      run: chmod +x golang-ai-agent
    
    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils
    
    - name: Start application
      run: |
        ./golang-ai-agent &
        sleep 5
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        ab -n 100 -c 10 http://localhost:8080/health
        ab -n 50 -c 5 http://localhost:8080/status
    
    - name: Stop application
      run: kill $APP_PID || true

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy notification
      run: |
        echo "üöÄ Deploying AI Agent to production..."
        echo "Docker image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
    
    # Add your deployment steps here
    # For example, deploy to cloud provider, update Kubernetes, etc.
    
    - name: Deployment success notification
      run: |
        echo "‚úÖ AI Agent deployed successfully!"
        echo "Available endpoints:"
        echo "- Health: /health"
        echo "- Status: /status" 
        echo "- Generate App: POST /generate-app"
        echo "- Test App: POST /test-app"
        echo "- Generate & Test: POST /generate-and-test"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build, security, integration-test]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "üéâ CI/CD Pipeline completed successfully!"
        echo "‚úÖ Tests passed"
        echo "‚úÖ Build successful"
        echo "‚úÖ Security checks passed"
        echo "‚úÖ Integration tests passed"
    
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Build result: ${{ needs.build.result }}"
        echo "Security result: ${{ needs.security.result }}"
        echo "Integration test result: ${{ needs.integration-test.result }}"
        exit 1

